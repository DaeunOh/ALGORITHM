/*

문제
alpha_yut
윷놀이 판에 말 4개가 움직일때, 얻은 점수 합을 출력하라. 
각 말들이 가장 마지막에 밟았던 칸의 점수를 합산한다.

말의 이동 시작점은 Start 이며, 도착지점은 End 이다. 
만약, 이동해야하는 칸이 도착 지점을 넘어서거나, 
도착 지점을 밟았을 경우 도착 지점의 점수를 얻고 해당 말은 판에서 제외된다. 
제외된 말은 더 이상 이동할 수 없다. 
50점과 75점 칸을 밟을 경우, 화살표가 가리키는 방향으로 움직여야한다. 
기본적으로 흰색 칸이 있는 경로로 이동한다.

이동하려고 하는 칸에 다른 말이 있는 경우 이동할 수 없다. 
해당 입력은 "-1"을 출력하도록 한다.

 

입력
첫 번째 줄에 총 이동 횟수 N이 주어진다. 
두 번째 줄에 이동하게되는 칸의 수가 공백을 통해 구분하여 N개 주어진다. 
세 번째 줄에 주어진 칸의 수를 몇 번 말이 이동하게 되는지 공백을 통해 구분하여 주어진다. 
(1 ≤ N ≤ 10, 1 ≤ 이동하는 칸의 수 ≤ 5, 1 ≤ 말의 번호 ≤ 4)

 

출력
각 말들이 이동을 종료한 후 위치해있는 칸의 점수 합을 출력한다. 
만약 이동하려고 하는 칸에 다른 말이 있는 경우 "-1" 을 출력한다.

 

입력 예제 1
5
2 3 1 2 4
1 1 2 3 4
출력 예제 1
85

입력 예제 2
8
5 5 5 5 3 2 3 2
1 2 3 4 1 2 3 4
출력 예제 2
-1

*/

#include <stdio.h>

const int MAX = 31 + 10;
const int MAXN = 10 + 10;

int yut[MAX] = {
  0, 5, 10, 15, 20,
  50, 30, 35, 40, 45,
  100, 55, 60, 65, 70,
  75, 80, 85, 90, 95,
  500, 1000, 275, 250, 300, 
  150, 175, 150, 125, 350, 400
};

int moving[MAX][6];

int temp[15][6] = {
  {5, 22, 23, 24, 25, 26},
  {10, 27, 28, 24, 29, 30},
  {22, 23, 24, 25, 26, 15},
  {23, 24, 25, 26, 15, 16},
  {24, 29, 30, 20, 21, 21},
  {25, 26, 15, 16, 17, 18},
  {26, 15, 16, 17, 18, 19},
  {27, 28, 24, 29, 30, 20},
  {28, 24, 29, 30, 20, 21},
  {29, 30, 20, 21, 21, 21},
  {30, 20, 21, 21, 21, 21}
};

int seqN[MAXN] = {0, };
int cur[5] = {0, };
int sum = 0;

int main() {
  for(int i=0; i<11; i++) {
    for(int j=1; j<=5; j++) {
      moving[temp[i][0]][j] = temp[i][j];
    }
  }
  
  int N;
  scanf("%d", &N);
  
  for(int i=0; i<N; i++) {
    scanf("%d", &seqN[i]);
  }
  
  for(int i=0; i<N; i++) {
    int idx;
    scanf("%d", &idx);
    
    if(cur[idx] == 21) continue;
    
    bool flag = false;
    for(int j=0; j<11; j++) {
      if(cur[idx] == temp[j][0]) {
        flag = true;
        break;
      }
    }
    
    if(flag) {
      cur[idx] = moving[cur[idx]][seqN[i]];
    }
    else {
      cur[idx] += seqN[i];
      if(cur[idx] > 21) cur[idx] = 21;
    }
    
    for(int j=1; j<=4; j++) {
      if(j != idx && cur[idx] == cur[j]) {
        printf("-1\n");
        return 0;
      }
    }
  }
  
  for(int i=1; i<=4; i++) {
    sum += yut[cur[i]];
  }
  
  printf("%d\n", sum);
  
  return 0;
}