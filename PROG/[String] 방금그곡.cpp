// 소요시간: 1시간 5분
// 실행시간: 0ms

/*

라디오를 자주 듣는 네오는 라디오에서 방금 나왔던 음악이 무슨 음악인지 궁금해질 때가 많다. 
그럴 때 네오는 다음 포털의 '방금그곡' 서비스를 이용하곤 한다. 
방금그곡에서는 TV, 라디오 등에서 나온 음악에 관해 제목 등의 정보를 제공하는 서비스이다.

네오는 자신이 기억한 멜로디를 가지고 방금그곡을 이용해 음악을 찾는다. 
그런데 라디오 방송에서는 한 음악을 반복해서 재생할 때도 있어서 
네오가 기억하고 있는 멜로디는 음악 끝부분과 처음 부분이 이어서 재생된 멜로디일 수도 있다. 
반대로, 한 음악을 중간에 끊을 경우 원본 음악에는 네오가 기억한 멜로디가 들어있다 해도 
그 곡이 네오가 들은 곡이 아닐 수도 있다. 
그렇기 때문에 네오는 기억한 멜로디를 재생 시간과 제공된 악보를 직접 보면서 비교하려고 한다. 
다음과 같은 가정을 할 때 네오가 찾으려는 음악의 제목을 구하여라.

- 방금그곡 서비스에서는 음악 제목, 재생이 시작되고 끝난 시각, 악보를 제공한다.
- 네오가 기억한 멜로디와 악보에 사용되는 음은 C, C#, D, D#, E, F, F#, G, G#, A, A#, B 12개이다.
- 각 음은 1분에 1개씩 재생된다. 음악은 반드시 처음부터 재생되며 음악 길이보다 재생된 시간이 길 때는 
  음악이 끊김 없이 처음부터 반복해서 재생된다. 음악 길이보다 재생된 시간이 짧을 때는 처음부터 재생 시간만큼만 재생된다.
- 음악이 00:00를 넘겨서까지 재생되는 일은 없다.
- 조건이 일치하는 음악이 여러 개일 때에는 라디오에서 재생된 시간이 제일 긴 음악 제목을 반환한다. 
  재생된 시간도 같을 경우 먼저 입력된 음악 제목을 반환한다.
- 조건이 일치하는 음악이 없을 때에는 `(None)`을 반환한다.

입력 형식
입력으로 네오가 기억한 멜로디를 담은 문자열 m과 방송된 곡의 정보를 담고 있는 배열 musicinfos가 주어진다.
- m은 음 1개 이상 1439개 이하로 구성되어 있다.
- musicinfos는 100개 이하의 곡 정보를 담고 있는 배열로, 각각의 곡 정보는 
  음악이 시작한 시각, 끝난 시각, 음악 제목, 악보 정보가 ','로 구분된 문자열이다.
- 음악의 시작 시각과 끝난 시각은 24시간 HH:MM 형식이다.
- 음악 제목은 ',' 이외의 출력 가능한 문자로 표현된 길이 1 이상 64 이하의 문자열이다.
- 악보 정보는 음 1개 이상 1439개 이하로 구성되어 있다.

출력 형식
조건과 일치하는 음악 제목을 출력한다.

입출력 예시
m	musicinfos	answer
ABCDEFG	[12:00,12:14,HELLO,CDEFGAB, 13:00,13:05,WORLD,ABCDEF]	HELLO
CC#BCC#BCC#BCC#B	[03:00,03:30,FOO,CC#B, 04:00,04:08,BAR,CC#BCC#BCC#B]	FOO
ABC	[12:00,12:14,HELLO,C#DEFGAB, 13:00,13:05,WORLD,ABCDEF]	WORLD

설명
첫 번째 예시에서 HELLO는 길이가 7분이지만 12:00부터 12:14까지 재생되었으므로 
실제로 CDEFGABCDEFGAB로 재생되었고, 이 중에 기억한 멜로디인 ABCDEFG가 들어있다.

세 번째 예시에서 HELLO는 C#DEFGABC#DEFGAB로, WORLD는 ABCDE로 재생되었다. 
HELLO 안에 있는 ABC#은 기억한 멜로디인 ABC와 일치하지 않고, WORLD 안에 있는 ABC가 기억한 멜로디와 일치한다.

*/

/*

◆ 풀이

다양한 string 함수를 사용하여 문자열의 일부를 치환하고, 일부를 분리함으로써 문제에서 주어진 악보를 찾는 문제.
string 함수를 잘 사용해본 적이 없다면, 구글링을 통해 알아내는 수밖에 없어서 오래 걸리는 문제이다 ㅎㅎ;; (바로 나다...)
대신 그만큼 string에서 자주 사용되는 함수들을 모두 사용해볼 수 있는 좋은 문제기도 하다!

문제에는 네오가 들었던 멜로디 m과 100개 이하의 곡정보를 담고 있는 배열 musicinfos가 주어진다.
따라서 musicinfos에 들어있는 곡 중, 네오가 들었던 멜로디 m이 해당 곡에 포함되어 있는지 확인하는 문제가 된다.

전체적인 수행 과정은 다음과 같다.
1) 멜로디 m에 존재하는 #을 소문자로 치환한다. (C# -> c)
2) 모든 곡에 대해
    2-1) 재생 시간을 계산한다.
    2-2) 음악 제목과 악보를 분리한다.
    2-3) 악보에 존재하는 #을 소문자로 치환한다.
    2-4) 음악 길이와 재생 시간에 따라 새로운 악보를 만든다.
    2-5) 새로운 악보에 멜로디 m이 존재하는지 확인한다.

1)
멜로디와 악보에 사용되는 음은 C, D, E와 같은 음도 있지만 C#, D#처럼 #이 붙어있는 음도 존재한다.
따라서 멜로디와 악보의 길이 자체는 실제 멜로디의 길이, 악보의 길이에 대응하지 않으므로
각 음별로 파싱을 하거나, C#을 문자열에 사용되지 않는 c와 같이 치환함으로써 해결할 수 있다. (나는 치환 방법을 사용했다.)
대문자를 소문자로 치환하기 위한 함수는 tolower이다.

2-1)
음악의 시작 시각과 끝난 시각은 항상 HH:MM 형식이므로
총 재생시간은 문자열을 분리하는 함수(substr)와 정수로 바꾸는 바꾸는 함수(stoi)를 잘 이용하면 쉽게 구할 수 있다.

2-2)
음악 제목과 악보는 문자열의 인덱스 12부터 ','을 구분자로 구분되어 있으므로,
이를 활용하여 두 문자열을 분리할 수 있다.

2-3)
악보 역시 멜로디와 동일하게 #을 소문자로 치환해준다.

2-4)
음악 길이가 재생 시간보다 짧은 경우에는 기존 악보를 재생 길이에 맞춰 끊김이 없도록 늘려줘야 하고,
긴 경우에는 재생 시간에 맞춰 기존 악보를 잘라준다.

2-5)
음악 길이와 재생 시간에 따라 만들어진 새로운 악보에 m이 존재하는지 확인해야 하는데,
둘 다 string으로 되어 있으므로, 간편하게 find 함수를 통해 m이 존재하는지 확인할 수 있다.
만약 존재하지 않는다면 find 함수는 string::npos를 반환할 것이고, 존재한다면 첫 시작의 인덱스를 반환할 것이다.
또한, 최종적으로 반환하게 되는 음악 제목은 재생 시간이 제일 길면서 가장 먼저 입력된 음악 제목이므로,
이를 잘 고려하여 반환할 음악 제목을 결정하도록 한다.


◆ 후기

가끔 string과 관련된 문제가 나오면 string과 관련된 함수를 외워둔 게 별로 없어서
구글링을 하거나 정리해둔 노트를 참고하는데, 이 문제 역시도 substr과 stoi를 제외하고는 조금 생소한 함수들이었다.

그래도 이번에는 뭔가 문제를 풀면서, 그리고 풀이를 작성하면서 최대한 외우려고 노력했기에
다음에 string 함수를 활용하는 문제가 나오면 여기서 쓰인 함수는 찾아보지 않고 사용할 수 있을 것 같다.

오늘 새로 배운 함수는 노트에 따로 정리해두긴 했지만, 여기에도 적어두는 게 좋을 것 같아 정리해보고자 한다.

1) 문자 1개를 소문자(대문자)로 바꿔주는 함수
    tolower('대문자'); toupper('소문자');

2) "문자"가 처음으로(마지막으로) 나타나는 위치를 반환하는 함수
    str.find("문자"); str.rfind("문자");
    (만약 "문자"를 찾지 못하면 string::npos를 반환한다.)

특히 find라는 함수를 몰랐다면 이 문제를 풀기위해 조금 복잡한 방법을 사용해야 했을 것이다! 잘 기억해두자! ㅎㅎㅎㅎ

*/

#include <string>
#include <vector>
#include <iostream>

using namespace std;

string solution(string m, vector<string> musicinfos) {
    string answer = "(None)";
    int answerLen = 0;
    
    // m에 존재하는 #을 소문자로 치환한다.
    string newM = "";
    for(int i=0; i<m.size(); i++) {
        if(m[i] == '#') newM.back() = tolower(newM.back());
        else newM += m[i];
    }
    
    for(auto &music : musicinfos) {
        // 1) 재생 시간을 계산한다.
        int h = stoi(music.substr(6, 2)) - stoi(music.substr(0, 2));
        int m = stoi(music.substr(9, 2)) - stoi(music.substr(3, 2));
        int playLen = h * 60 + m;
        
        // 2) 음악 제목과 악보를 분리한다.
        string title = music.substr(12, music.rfind(',') - 12);
        string score = music.substr(music.rfind(',') + 1);
        
        // 3) 악보에 존재하는 #을 소문자로 치환한다.
        string newScore = "";
        for(int i=0; i<score.size(); i++) {
            if(score[i] == '#') newScore.back() = tolower(newScore.back());
            else newScore += score[i];
        }
        
        // 4) 음악 길이와 재생 시간에 따라 새로운 악보를 만든다.
        string myScore = "";
        if(newScore.size() < playLen) {
            // 끊김 없이 반복 재생
            while(myScore.size() < playLen) myScore += newScore;
            myScore = myScore.substr(0, playLen);
        }
        else {
            // 처음 ~ 재생 시간 만큼만
            myScore = newScore.substr(0, playLen);
        }
        
        // 5) 새로운 악보에 m이 존재하는지 확인한다.
        if(myScore.find(newM) != string::npos && answerLen < playLen) {
            answer = title;
            answerLen = playLen;
        }
    }
    
    return answer;
}