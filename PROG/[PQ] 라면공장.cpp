/*

▶ 소요시간 및 실행시간
31분, 0ms

▶ 문제
현재 공장에 남아있는 밀가루 수량, 밀가루 공급 일정과 
해당 시점에 공급 가능한 밀가루 수량, 원래 공장으로부터 공급받을 수 있는 시점이 주어질 때, 
밀가루가 떨어지지 않고 공장을 운영하기 위해서 최소한 몇 번 해외 공장으로부터 밀가루를 공급받아야 하는지를 구하시오.

▶ 출처
https://programmers.co.kr/learn/courses/30/lessons/42629

▶ 풀이
밀가루가 떨어지지 않도록 하는 최소 공급 횟수를 구하는 문제.

어찌보면 공급 횟수를 0회부터 최대까지 조정하면서 맞는 경우를 고르는 문제 같아 BF라고 생각할 수도 있지만,
사실 공급받을 수 있는 최대 횟수가 20000이기 때문에, BF를 통해서는 시간제한이 나게 된다.
(BF로 풀어볼까? 했는데 말도 안되는 최대 횟수로 인해 과감히 포기했다 ㅎㅎ..)

그러면 최소 공급 횟수를 어떻게 구할 수 있을까?
이에 대한 정답을 찾기 위해선 "일반적인 생각"을 깨뜨려야 한다.

원래는 밀가루가 떨어질 것을 예상하고, 미리 밀가루를 공급받아 밀가루를 보충시켜 놓는 것이 일반적이지만,
이 문제에서는 미리 예상할 필요가 없다는 것이다. 무슨말인가 하면,
예상하지 않아도, 밀가루가 떨어지는 시점에 이미 지나간 공급 일자들 중 가장 큰 공급량을 선택하면 된다는 것이다.
이미 공급 날짜는 지나 왔으므로, 그 전까지는 밀가루가 떨어지지 않았다는 소리고,
그 중 어느 것을 받아도 계획에는 차질이 없으므로, 가능한 최대한 많은 양을 공급받는게 좋기 때문에 가능한 방법이다.

일반적인 벡터를 사용하면 매번 밀가루가 떨어질 때마다 최대 공급량을 택하기 위해 정렬을 해야하지만,
우선순위큐를 이용하면 최대 공급량을 택하기 위해 top에 있는 공급량을 이용하면 된다. (오름차순)
그리고 top에 있는 공급량을 사용했다면, 이후에는 사용할 수 없으므로 pop을 해주는 것도 잊지 말자!

▶ 후기
우선순위 큐에 대한 개념을 복습하기 위해 풀어보고자 했던 문제인데,
사실 풀이에서 언급한 "일반적인 생각"을 깨뜨리는 데에 시간이 오래 걸렸던 문제이다.

코드를 보면 정말 몇 줄 안되는 코드기에 아이디어가 떠오른 이후에는 금방 구현할 수 있었으나,
그 아이디어가 좀처럼 떠오르지 않았다.. ㅎㅎㅎㅎ

다른 문제를 통해서 우선순위큐를 조금 더 복습하고, 비슷한 문제의 유형의 접근 방식에도 조금 익숙해져야겠다!

*/

#include <vector>
#include <queue>

using namespace std;

priority_queue<int> pq;

int solution(int stock, vector<int> dates, vector<int> supplies, int k) {
    int answer = 0;
    
    int idx = 0;
    for(int i=0; i<k; i++) {
        if(dates[idx] == i) pq.push(supplies[idx++]);
        
        if(stock - 1 < 0) {
            stock += pq.top();
            pq.pop();
            answer++;
        }
        
        stock--;
    }
    
    return answer;
}