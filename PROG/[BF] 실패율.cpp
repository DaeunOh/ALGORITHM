// 소요시간: 24분
// 실행시간: 최대 46ms

/*

슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 
요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 
역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 
오렐리를 위해 실패율을 구하는 코드를 완성하라.

- 실패율은 다음과 같이 정의한다.
  - 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수

전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 
실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

제한사항
- 스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
- stages의 길이는 1 이상 200,000 이하이다.
- stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
  - 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
  - 단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
- 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
- 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.

입출력 예
N	stages	result
5	[2, 1, 2, 6, 2, 4, 3, 3]	[3,4,2,1,5]
4	[4,4,4,4,4]	[4,1,2,3]

입출력 예 설명

입출력 예 #1
1번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 
따라서 1번 스테이지의 실패율은 다음과 같다.
- 1 번 스테이지 실패율 : 1/8

2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 
따라서 2번 스테이지의 실패율은 다음과 같다.
- 2 번 스테이지 실패율 : 3/7

마찬가지로 나머지 스테이지의 실패율은 다음과 같다.
- 3 번 스테이지 실패율 : 2/4
- 4 번 스테이지 실패율 : 1/2
- 5 번 스테이지 실패율 : 0/1

각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.
- [3,4,2,1,5]

입출력 예 #2
모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.
- [4,1,2,3]

*/

/*

처음에는 stages의 길이가 최대 20만이기 때문에 완전탐색으로는 풀 수 없을줄 알았는데,
stages의 길이는 최대 20만이지만, 스테이지의 개수는 최대 500이기 때문에
대략적으로 500 * 20만이라고 생각하면, 1초 안에 해결할 수 있으므로 충분히 풀 수 있게 된다!

이 문제에서는 "실패율"이라는 개념이 나온다. 수학 시간에 많이 들어본 것 같은 개념인데, 거의 유사하다고 봐도 된다. ㅋㅋ
여기서의 실패율은 (도달 but 클리어 x 플레이어 / 도달 플레이어)로 정의되는데, 분모 분자를 해석하면 다음과 같다.

"분자(도달 but 클리어 x 플레이어) = stages[i]가 스테이지 번호와 같은 경우"
"분모(도달 플레이어) = stages[i]가 스테이지 번호와 같거나 큰 경우"

나는 해당 분자와 분모를 구하기 위해 모든 플레이어를 돌면서
각 스테이지에 존재하는 플레이어의 수를 카운트하고(cnt), 1번 스테이지부터 자신이 도전하고 있는 스테이지까지 ++을 해줬다.
(해당 스테이지를 도전하고 있다는 뜻은 아직 해당 스테이지는 클리어하지 못했다는 뜻이고,
1번부터 해당 스테이지 - 1 까지는 다 클리어 했다는 소리이므로!!)

그리고 해당 반복문이 끝나면 이후 다시 1번 스테이지부터 N번 스테이지까지 돌면서
스테이지에 도달한 유저가 없는 경우에는 실패율 0과 스테이지 번호를,
그리고 있는 경우에는 계산한 실패율과 스테이지 번호를 tmp에 넣었다.
아, 그런데 여기서 주의할 점은 계산한 실패율은 항상 소수이므로 double로 캐스팅해줘야 한다는 것!!!! 잊지 말자!!!(난 안잊음ㅎ)

이후 내림차순으로 정렬해야 하므로(또한 실패율이 같다면 작은 번호의 스테이지가 먼저 오도록 해야 하므로)
comp라는 비교 함수를 새로 만들어 주어 주어진 조건에 맞게 정렬할 수 있도록 했다!
그리고 마지막에는 정렬된 벡터를 가지고 answer에 다시 넣어주는 과정을 거침으로써 정답을 구할 수 있었다! ㅎㅎㅎ

그리고 오늘도 역시나..! 한 번에 계산할 수 있는 걸 여러 개로 쪼갠 바보같은 행동이 있었으니...
오늘의 바보 행동은 바로 초기에 cnt와 arrived를 이용해서 미리 계산해 두었던 것이다. ㅠㅠ

굳이 이렇게 하지 않아도 바깥 반복문을 1부터 N까지로 두고 안쪽 반복문을 각 스테이지로 둔다면,
반복문을 다시 사용하지 않아도, 그리고 메모리를 사용하지 않아도!!!
해당 스테이지에서 변수 2개만을 이용해 실패율 계산을 할 수 있게 된다 ㅎㅎㅎ;;;

저번에도 비슷한 실수를 겪은 것 같지만.... 오늘부터는 진짜...
불필요하게 반복문을 하나 더 만들거나... 그리고 불필요한 메모리를 사용하는 일이 없도록 주의해야겠당..ㅎ.ㅎ

*/

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 501 + 10;

int arrived[MAX] = {0, };
int cnt[MAX] = {0, };
vector<pair<double, int>> tmp; // 실패율, 스테이지 번호

bool comp(pair<double, int> &a, pair<double, int> &b) {
    if(a.first == b.first) return a.second < b.second;
    else return a.first > b.first;
}

vector<int> solution(int N, vector<int> stages) {
    vector<int> answer;
    
    for(auto &stage : stages) {
        cnt[stage]++; // 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수
        for(int i=1; i<=stage; i++) arrived[i]++; // 스테이지에 도달한 플레이어 수
    }
    
    for(int i=1; i<=N; i++) {
        if(!arrived[i]) tmp.push_back(make_pair(0, i)); // 스테이지에 도달한 유저가 없는 경우
        else tmp.push_back(make_pair((double)cnt[i]/arrived[i], i)); // 실패율 계산
    }
    
    sort(tmp.begin(), tmp.end(), comp); // 내림차순 정렬
    
    for(auto & t : tmp) answer.push_back(t.second);
    
    return answer;
}