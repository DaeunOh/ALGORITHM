// 소요시간: 20분
// 실행시간: 0ms

/*

문제 설명
데이터 처리 전문가가 되고 싶은 어피치는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
간단한 예로 aabbaccc의 경우 2a2ba3c(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, abcabcdede와 같은 문자열은 전혀 압축되지 않습니다. 어피치는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.

예를 들어, ababcdcdababcdcd의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 2ab2cd2ab2cd로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 2ababcdcd로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

다른 예로, abcabcdede와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 abcabc2de가 되지만, 3개 단위로 자른다면 2abcdede가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

제한사항
s의 길이는 1 이상 1,000 이하입니다.
s는 알파벳 소문자로만 이루어져 있습니다.
입출력 예
s	result
"aabbaccc"	7
"ababcdcdababcdcd"	9
"abcabcdede"	8
"abcabcabcabcdededededede"	14
"xababcdcdababcdcd"	17
입출력 예에 대한 설명
입출력 예 #1

문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #2

문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #3

문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.

입출력 예 #4

문자열을 2개 단위로 자르면 abcabcabcabc6de 가 됩니다.
문자열을 3개 단위로 자르면 4abcdededededede 가 됩니다.
문자열을 4개 단위로 자르면 abcabcabcabc3dede 가 됩니다.
문자열을 6개 단위로 자를 경우 2abcabc2dedede가 되며, 이때의 길이가 14로 가장 짧습니다.

입출력 예 #5

문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다.
따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다.
이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.

*/

/*

문자열을 1개부터 최대 s.size() / 2개 단위로 잘라가면서 중복되는 부분이 나타나면 압축하여 압축된 문자열을 만들고,
그 문자열들 중 가장 짧은 문자열의 길이를 반환하는 문제. (s.size가 아닌 /2인 이유는 압축되는 최대 길이가 /2기 때문이다.)

문자열을 자르기 위해서는 substr이라는 함수를 사용했으며, 이 함수를 사용하면 원하는 길이로 문자열을 자를 수 있다.
(또한, 원하는 길이보다 문자열이 작더라도 문자열의 맨 끝까지 알아서 잘라준다. 굿굿!)

이후 압축과정이 필요한데, 압축이 되는 조건은 자른 문자열들 중 같은 값이 연속해서 나타날 때이다.
따라서 이전 문자열을 저장해 놓고(초기값은 0부터 n-1크기의 문자열이다.),
해당 문자열과 같으면 cnt를 증가시키며 압축 과정을 거치고,
다르면 cnt가 1보다 클 경우 숫자와 함께 해당 문자열을 이어붙인다. (1인 경우에는 문자열만 붙인다.)

위와 같은 과정을 압축된 문자열의 길이를 모두 구하고, 가장 작은 값을 answer로 하여 return하면 된다.
단!!! 여기서 실수할 수도 있는데(나는 실수함......), 최솟값을 갱신하는 과정에서
난 answer의 default 값으로 그냥 아무 생각없이 늘 하던대로 987987987을 넣어줬다.

하지만 이럴 경우, 문자열의 길이가 1인 경우에는 1이 반환되어야 하는데, 987987987이 반환되게 된다.
따라서 문제에 맞게 answer가 가질 수 있는 가장 최댓값인 s.size()를 초기값으로 넣어주는 것이 올바른 접근이다!
초기값 설정 문제는 은근 자주 겪을 수 있는 문제인 것 같다. 숙지해두자!!!

*/

#include <string>
#include <vector>

using namespace std;

int splitStr(string &s, int n) {
    // 문자열을 n개 단위로 자르고 압축한 후, 그 길이를 반환하는 함수.
    int cnt = 1;
    string prev = s.substr(0, n), newStr = ""; // 초기값은 s[0] ~ s[n-1]
    for(int i=n; i<s.size(); i+=n) {
        string str = s.substr(i, n);
        
        if(prev == str) { // 압축 가능한 경우
            cnt++;
        }
        else {
            if(cnt > 1) newStr += to_string(cnt); // 1이 넘는 경우에만 표시
            newStr += prev; // 압축된 문자열
            
            prev = str;
            cnt = 1;
        }
    }
    
    if(cnt > 1) newStr += to_string(cnt);
    newStr += prev;
    
    return newStr.size();
}

int solution(string s) {
    int answer = s.size(); // answer의 최댓값은 s의 크기이다.
    
    for(int i=1; i<=s.size()/2; i++) {
        // 문자열을 i개 단위로 자른다.
        int strSize = splitStr(s, i);
        if(strSize < answer) answer = strSize;
    }
    
    return answer;
}