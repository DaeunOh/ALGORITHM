/*

문제 설명
빙하가 깨지면서 스노우타운에 떠내려 온 죠르디는 인생 2막을 위해 주택 건축사업에 뛰어들기로 결심하였습니다. 
죠르디는 기둥과 보를 이용하여 벽면 구조물을 자동으로 세우는 로봇을 개발할 계획인데, 
그에 앞서 로봇의 동작을 시뮬레이션 할 수 있는 프로그램을 만들고 있습니다.
프로그램은 2차원 가상 벽면에 기둥과 보를 이용한 구조물을 설치할 수 있는데, 
기둥과 보는 길이가 1인 선분으로 표현되며 다음과 같은 규칙을 가지고 있습니다.

기둥은 바닥 위에 있거나 보의 한쪽 끝 부분 위에 있거나, 또는 다른 기둥 위에 있어야 합니다.
보는 한쪽 끝 부분이 기둥 위에 있거나, 또는 양쪽 끝 부분이 다른 보와 동시에 연결되어 있어야 합니다.
단, 바닥은 벽면의 맨 아래 지면을 말합니다.

2차원 벽면은 n x n 크기 정사각 격자 형태이며, 각 격자는 1 x 1 크기입니다. 맨 처음 벽면은 비어있는 상태입니다. 
기둥과 보는 격자선의 교차점에 걸치지 않고, 격자 칸의 각 변에 정확히 일치하도록 설치할 수 있습니다. 
다음은 기둥과 보를 설치해 구조물을 만든 예시입니다.

기둥과보-1.jpg

예를 들어, 위 그림은 다음 순서에 따라 구조물을 만들었습니다.

(1, 0)에서 위쪽으로 기둥을 하나 설치 후, (1, 1)에서 오른쪽으로 보를 하나 만듭니다.
(2, 1)에서 위쪽으로 기둥을 하나 설치 후, (2, 2)에서 오른쪽으로 보를 하나 만듭니다.
(5, 0)에서 위쪽으로 기둥을 하나 설치 후, (5, 1)에서 위쪽으로 기둥을 하나 더 설치합니다.
(4, 2)에서 오른쪽으로 보를 설치 후, (3, 2)에서 오른쪽으로 보를 설치합니다.
만약 (4, 2)에서 오른쪽으로 보를 먼저 설치하지 않고, (3, 2)에서 
오른쪽으로 보를 설치하려 한다면 2번 규칙에 맞지 않으므로 설치가 되지 않습니다. 
기둥과 보를 삭제하는 기능도 있는데 기둥과 보를 삭제한 후에 남은 기둥과 보들 또한 위 규칙을 만족해야 합니다. 
만약, 작업을 수행한 결과가 조건을 만족하지 않는다면 해당 작업은 무시됩니다.

벽면의 크기 n, 기둥과 보를 설치하거나 삭제하는 작업이 순서대로 담긴 2차원 배열 build_frame이 매개변수로 주어질 때, 
모든 명령어를 수행한 후 구조물의 상태를 return 하도록 solution 함수를 완성해주세요.

제한사항
1) n은 5 이상 100 이하인 자연수입니다.
2) build_frame의 세로(행) 길이는 1 이상 1,000 이하입니다.
3) build_frame의 가로(열) 길이는 4입니다.
4) build_frame의 원소는 [x, y, a, b]형태입니다.
  4-1) x, y는 기둥, 보를 설치 또는 삭제할 교차점의 좌표이며, [가로 좌표, 세로 좌표] 형태입니다.
  4-2) a는 설치 또는 삭제할 구조물의 종류를 나타내며, 0은 기둥, 1은 보를 나타냅니다.
  4-3) b는 구조물을 설치할 지, 혹은 삭제할 지를 나타내며 0은 삭제, 1은 설치를 나타냅니다.
  4-4) 벽면을 벗어나게 기둥, 보를 설치하는 경우는 없습니다.
  4-5) 바닥에 보를 설치 하는 경우는 없습니다.
5) 구조물은 교차점 좌표를 기준으로 보는 오른쪽, 기둥은 위쪽 방향으로 설치 또는 삭제합니다.
6) 구조물이 겹치도록 설치하는 경우와, 없는 구조물을 삭제하는 경우는 입력으로 주어지지 않습니다.
7) 최종 구조물의 상태는 아래 규칙에 맞춰 return 해주세요.
  7-1) return 하는 배열은 가로(열) 길이가 3인 2차원 배열로, 각 구조물의 좌표를 담고있어야 합니다.
  7-2) return 하는 배열의 원소는 [x, y, a] 형식입니다.
  7-3) x, y는 기둥, 보의 교차점 좌표이며, [가로 좌표, 세로 좌표] 형태입니다.
  7-4) 기둥, 보는 교차점 좌표를 기준으로 오른쪽, 또는 위쪽 방향으로 설치되어 있음을 나타냅니다.
  7-5) a는 구조물의 종류를 나타내며, 0은 기둥, 1은 보를 나타냅니다.
  7-6) return 하는 배열은 x좌표 기준으로 오름차순 정렬하며, x좌표가 같을 경우 y좌표 기준으로 오름차순 정렬해주세요.
  7-7) x, y좌표가 모두 같은 경우 기둥이 보보다 앞에 오면 됩니다.

입출력 예
n	build_frame	result
5	[[1,0,0,1],[1,1,1,1],[2,1,0,1],[2,2,1,1],[5,0,0,1],[5,1,0,1],[4,2,1,1],[3,2,1,1]]	[[1,0,0],[1,1,1],[2,1,0],[2,2,1],[3,2,1],[4,2,1],[5,0,0],[5,1,0]]
5	[[0,0,0,1],[2,0,0,1],[4,0,0,1],[0,1,1,1],[1,1,1,1],[2,1,1,1],[3,1,1,1],[2,0,0,0],[1,1,1,0],[2,2,0,1]]	[[0,0,0],[0,1,1],[1,1,1],[2,1,1],[3,1,1],[4,0,0]]

입출력 예에 대한 설명
입출력 예 #1

문제의 예시와 같습니다.

입출력 예 #2

여덟 번째 작업을 수행 후 아래와 같은 구조물 만들어집니다.

기둥과보-2.jpg

아홉 번째 작업의 경우, (1, 1)에서 오른쪽에 있는 보를 삭제하면 (2, 1)에서 
오른쪽에 있는 보는 조건을 만족하지 않으므로 무시됩니다.

열 번째 작업의 경우, (2, 2)에서 위쪽 방향으로 기둥을 세울 경우 조건을 만족하지 않으므로 무시됩니다.

*/

/*

문제의 조건대로 구현하기만 하면 되는 시뮬레이션 문제.
이지만.......... 사실 이 문제를 푸는 데 엄청 오래걸렸다 ㅠㅠ

일단 2가지의 종류(기둥 또는 보)를 세워야 한다는 것도 복잡했고...
설치는 그나마 할만했으나 제거하는 부분에 고려해야 될 조건이 은근 복잡해서 하나씩 빠뜨렸다 ㅠㅠ

사실 시뮬레이션 문제는 중간에 조건 하나만 빠뜨려도 어느 부분에서 틀린지 찾기가 어렵기 때문에
처음부터 확실하게 설계하고 구현을 시작해야 하는데,
나름 열심히 설계한다고 했지만 조금 더 신중하게 설계했어야 했나보다 ㅜㅜ..
다음에는 이번보다 조금 더 확실하게 설계를 하고 넘어가야겠다!!

이 문제의 간단한 수행 단계를 설명하자면 다음과 같다.
1) 설치의 경우
    기둥 또는 보를 해당 위치에 설치할 수 있는지 확인하고, 설치할 수 있다면 해당 맵에 표시한다.
2) 삭제의 경우
    기둥 또는 보를 삭제했다고 가정한 후, 기둥 또는 보의 조건에 맞춰서 영향을 받은 위치에 여전히 설치할 수 있는지 확인한다.
    만약 설치가 가능하다면 가정했던 단계를 이행하지만, 그렇지 않다면 다시 원래 맵으로 돌려놓는다.

아 그리고, 이 문제를 풀 때 나는 arr라는 2차원 배열을 하나 선언해 1: 기둥, 2: 보, 3: 기둥+보로 사용했는데,
그러다보니 조건문을 사용할 때 조건이 길어지거나 하나를 빠뜨릴 수 있는 위험이 커졌다. ㄷㄷ

그러니 만약 다음에 다시 이 문제를 풀게 된다면,
arr 하나가 아닌 기둥을 위한 2차원 배열, 보를 위한 2차원 배열 따로 선언해놓고 그 둘을 사용하는게
코드가 더 깔끔하고, 명확하게 보일 것 같다! 꼭 적용해보자! ㅎㅎㅎ

*/

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 100 + 10;

int arr[MAX][MAX] = {0, }; // 1: 기둥, 2: 보, 3: 기둥+보

bool comp(vector<int> &v1, vector<int> &v2) {
    if(v1[0] == v2[0] && v1[1] == v2[1]) return v1[2] < v2[2];
    else if(v1[0] == v2[0]) return v1[1] < v2[1];
    else return v1[0] < v2[0];
}

bool isPossible(int y, int x, int a) {
    if(a) { // 보
        // 1) 한쪽 끝 부분이 기둥 위 2) 양쪽 끝 부분이 다른 보와 동시 연결
        if((y && (arr[y-1][x] == 1 || arr[y-1][x] == 3
                   || arr[y-1][x+1] == 1 || arr[y-1][x+1] == 3))
          || (x && arr[y][x-1] >= 2 && arr[y][x+1] >= 2))
           return true;
    }
    else { // 기둥
        // 1) 바닥 위, 2-1/2-2) 보의 한쪽 끝 부분 위, 3) 다른 기둥 위
        if(!y || arr[y][x] >= 2 || (x && arr[y][x-1] >= 2) 
           || (arr[y-1][x] == 1 || arr[y-1][x] == 3))
            return true;
    }
    
    return false;
}

vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
    vector<vector<int>> answer;
    
    for(auto &bf : build_frame) {
        int x = bf[0];
        int y = bf[1];
        int a = bf[2];
        
        if(bf[3] == 1) { // 설치
            if(isPossible(y, x, a)) {
                arr[y][x] += a + 1; // 1: 기둥, 2: 보, 3: 기둥+보
            }
        }
        else { // 삭제
            // arr를 바꾼 후 체크한다음 true면 다시 안돌려놓고, false면 돌려놓음
            arr[y][x] -= a + 1;
            
            if(a) { // 보
                // 1) 보의 왼쪽 끝 부분 위에 기둥이 존재하는 경우
                // 2) 보의 오른쪽 끝 부분 위에 기둥이 존재하는 경우
                // 3) 보의 왼쪽에 보가 존재하는 경우
                // 4) 보의 오른쪽에 보가 존재하는 경우
                if(((arr[y][x] == 1 || arr[y][x] == 3) && !isPossible(y, x, 0))
                  || ((arr[y][x+1] == 1 || arr[y][x+1] == 3) && !isPossible(y, x+1, 0))
                  || (x && arr[y][x-1] >= 2 && !isPossible(y, x-1, 1))
                  || (arr[y][x+1] >= 2 && !isPossible(y, x+1, 1)))
                    arr[y][x] += a + 1;
            }
            else { // 기둥
                // 1) 기둥의 위쪽에 기둥이 존재하는 경우
                // 2) 기둥의 위쪽에 보가 존재하는 경우
                // 3) 기둥의 왼쪽 위에 보가 존재하는 경우
                if(((arr[y+1][x] == 1 || arr[y+1][x] == 3) && !isPossible(y+1, x, 0))
                  || (arr[y+1][x] >= 2 && !isPossible(y+1, x, 1))
                  || (x && arr[y+1][x-1] >= 2 && !isPossible(y+1, x-1, 1)))
                    arr[y][x] += a + 1;
            }
        }
    }
    
    for(int i=0; i<=n; i++) {
        for(int j=0; j<=n; j++) {
            if(!arr[j][i]) continue;
            
            // 1: 기둥, 2: 보, 3: 기둥+보
            if(arr[j][i] == 1 || arr[j][i] == 2) answer.push_back({i, j, arr[j][i]-1});
            else {
                answer.push_back({i, j, 0});
                answer.push_back({i, j, 1});
            }
        }
    }
    
    // 조건에 맞게 정렬한다.
    sort(answer.begin(), answer.end(), comp);
    
    return answer;
}