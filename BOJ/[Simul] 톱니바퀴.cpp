// 소요시간: 24분
// 실행시간: 0ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초		512 MB		13754	6847	4981		51.129%

문제
총 8개의 톱니를 가지고 있는 톱니바퀴 4개가 아래 그림과 같이 일렬로 놓여져 있다. 
또, 톱니는 N극 또는 S극 중 하나를 나타내고 있다. 
톱니바퀴에는 번호가 매겨져 있는데, 가장 왼쪽 톱니바퀴가 1번, 그 오른쪽은 2번, 그 오른쪽은 3번, 가장 오른쪽 톱니바퀴는 4번이다.

[그림1-1]

이때, 톱니바퀴를 총 K번 회전시키려고 한다. 톱니바퀴의 회전은 한 칸을 기준으로 한다. 
회전은 시계 방향과 반시계 방향이 있고, 아래 그림과 같이 회전한다.

[그림1-2, 1-3]

톱니바퀴를 회전시키려면, 회전시킬 톱니바퀴와 회전시킬 방향을 결정해야 한다. 
톱니바퀴가 회전할 때, 서로 맞닿은 극에 따라서 옆에 있는 톱니바퀴를 회전시킬 수도 있고, 회전시키지 않을 수도 있다. 
톱니바퀴 A를 회전할 때, 그 옆에 있는 톱니바퀴 B와 서로 맞닿은 톱니의 극이 다르다면, 
B는 A가 회전한 방향과 반대방향으로 회전하게 된다. 예를 들어, 아래와 같은 경우를 살펴보자.

[그림2-1]

두 톱니바퀴의 맞닿은 부분은 초록색 점선으로 묶여있는 부분이다. 
여기서, 3번 톱니바퀴를 반시계 방향으로 회전했다면, 4번 톱니바퀴는 시계 방향으로 회전하게 된다. 
2번 톱니바퀴는 맞닿은 부분이 S극으로 서로 같기 때문에, 회전하지 않게 되고, 
1번 톱니바퀴는 2번이 회전하지 않았기 때문에, 회전하지 않게 된다. 따라서, 아래 그림과 같은 모양을 만들게 된다.

[그림2-2]

위와 같은 상태에서 1번 톱니바퀴를 시계 방향으로 회전시키면, 2번 톱니바퀴가 반시계 방향으로 회전하게 되고, 
2번이 회전하기 때문에, 3번도 동시에 시계 방향으로 회전하게 된다. 
4번은 3번이 회전하지만, 맞닿은 극이 같기 때문에 회전하지 않는다. 따라서, 아래와 같은 상태가 된다.

[그림2-3]

톱니바퀴의 초기 상태와 톱니바퀴를 회전시킨 방법이 주어졌을 때, 최종 톱니바퀴의 상태를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 1번 톱니바퀴의 상태, 둘째 줄에 2번 톱니바퀴의 상태, 
셋째 줄에 3번 톱니바퀴의 상태, 넷째 줄에 4번 톱니바퀴의 상태가 주어진다. 
상태는 8개의 정수로 이루어져 있고, 12시방향부터 시계방향 순서대로 주어진다. N극은 0, S극은 1로 나타나있다.
다섯째 줄에는 회전 횟수 K(1 ≤ K ≤ 100)가 주어진다. 다음 K개 줄에는 회전시킨 방법이 순서대로 주어진다. 
각 방법은 두 개의 정수로 이루어져 있고, 첫 번째 정수는 회전시킨 톱니바퀴의 번호, 두 번째 정수는 방향이다. 
방향이 1인 경우는 시계 방향이고, -1인 경우는 반시계 방향이다.

출력
총 K번 회전시킨 이후에 네 톱니바퀴의 점수의 합을 출력한다. 점수란 다음과 같이 계산한다.
- 1번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 1점
- 2번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 2점
- 3번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 4점
- 4번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 8점

예제 입력 1 
10101111
01111101
11001110
00000010
2
3 -1
1 1
예제 출력 1 
7
예제 입력 2 
11111111
11111111
11111111
11111111
3
1 1
2 1
3 1
예제 출력 2 
15
예제 입력 3 
10001011
10000011
01011011
00111101
5
1 1
2 1
3 1
4 1
1 -1
예제 출력 3 
6
예제 입력 4 
10010011
01010011
11100011
01010101
8
1 1
2 1
3 1
4 1
1 -1
2 -1
3 -1
4 -1
예제 출력 4 
5

*/

/*

시계 방향, 반시계 방향으로의 배열 회전과 재귀함수가 핵심인 시뮬레이션 문제.
이전에 SWEA에서 풀어봤던 문제지만, 시간도 줄이고 코드도 깔끔하게 짜기 위해 다시 풀어보았다.
결과적으론 42분 -> 24분으로 줄었고, 코드도 훨씬 깔끔해졌기에 대성공!!!

그때는 재귀함수를 사용할 때, 어느쪽을 봐야 되는지 범위를 정해줬는데 (왼쪽, 오른쪽)
이번에는 어느쪽을 봐야하는지 확인하기 위해 visited 배열을 사용했다.
함수가 호출되면 바로 자신에 해당하는 visited 배열이 true로 바뀌므로, 이미 확인한 자석이 된다.
따라서 나중에 재귀함수를 사용할 때, 해당 톱니바퀴를 이미 방문했었다면, 그쪽으로는 확인하지 않아도 된다는 뜻이 된다.

뭐 사실 깔끔하다의 기준은 주관적이지만 ㅎㅎㅎ.. 그래도 일반적으로 visited 배열은 자주 사용하는 거니까..
누가 봐도 이해가 쉬울 것 같다는.. 생각을.. 조심스레 해봤다. ㅋㅋㅋㅋ

아 그리고 예전에 웬만하면 cin, cout을 사용한다고 했었는데,
이 문제에서는 인풋이 띄어쓰기 없이 나와서.. 어쩔 수 없이 scanf, printf를 사용했다 ㅋㅋㅎㅎ
굳이 cin을 고집할 필요는 없으니까 ㅎㅎㅎ. 오랜만에 쓰니까 굉장히 어색했던.ㅎㅎㅎ;;;

그래도 시간이 줄어서 기분이 좋당~ㅎㅎ

*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <cstring>

using namespace std;

int wheel[5][8];
int K;
bool visited[5] = { false, };
int score[5] = { 0, 1, 2, 4, 8 };

void cw(int n) {
    int temp = wheel[n][7];
    for (int i = 6; i >= 0; i--) wheel[n][i + 1] = wheel[n][i];
    wheel[n][0] = temp;
}

void ccw(int n) {
    int temp = wheel[n][0];
    for (int i = 0; i < 7; i++) wheel[n][i] = wheel[n][i + 1];
    wheel[n][7] = temp;
}

void checkAndRotate(int n, int d) {
    visited[n] = true;

    if (n != 4 && !visited[n + 1] && wheel[n][2] != wheel[n + 1][6]) { // 오른쪽 확인
        checkAndRotate(n + 1, d == 1 ? -1 : 1);
    }
    if (n != 0 && !visited[n - 1] && wheel[n][6] != wheel[n - 1][2]) { // 왼쪽 확인
        checkAndRotate(n - 1, d == 1 ? -1 : 1);
    }

    if (d == 1) cw(n);
    else ccw(n);
}

int main() {
    for (int i = 1; i <= 4; i++) {
        for (int j = 0; j < 8; j++) {
            scanf("%1d", &wheel[i][j]);
        }
    }

    scanf("%d", &K);

    for (int i = 0; i < K; i++) {
        int n, d;
        scanf("%d %d", &n, &d);

        memset(visited, false, sizeof(visited));
        checkAndRotate(n, d);
    }

    int ans = 0;
    for (int i = 1; i <= 4; i++) {
        if (wheel[i][0]) ans += score[i];
    }

    printf("%d", ans);

    return 0;
}