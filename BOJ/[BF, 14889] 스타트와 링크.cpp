// 소요시간: 31분
// 실행시간: 24ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초		512 MB		22351	11758	6766		49.688%

문제
오늘은 스타트링크에 다니는 사람들이 모여서 축구를 해보려고 한다. 축구는 평일 오후에 하고 의무 참석도 아니다. 
축구를 하기 위해 모인 사람은 총 N명이고 신기하게도 N은 짝수이다. 
이제 N/2명으로 이루어진 스타트 팀과 링크 팀으로 사람들을 나눠야 한다.

BOJ를 운영하는 회사 답게 사람에게 번호를 1부터 N까지로 배정했고, 아래와 같은 능력치를 조사했다. 
능력치 Sij는 i번 사람과 j번 사람이 같은 팀에 속했을 때, 팀에 더해지는 능력치이다. 
팀의 능력치는 팀에 속한 모든 쌍의 능력치 Sij의 합이다. Sij는 Sji와 다를 수도 있으며, 
i번 사람과 j번 사람이 같은 팀에 속했을 때, 팀에 더해지는 능력치는 Sij와 Sji이다.

N=4이고, S가 아래와 같은 경우를 살펴보자.
i＼j	1	2	3	4
1	 	1	2	3
2	4	 	5	6
3	7	1	 	2
4	3	4	5	 

예를 들어, 1, 2번이 스타트 팀, 3, 4번이 링크 팀에 속한 경우에 두 팀의 능력치는 아래와 같다.
스타트 팀: S12 + S21 = 1 + 4 = 5
링크 팀: S34 + S43 = 2 + 5 = 7

1, 3번이 스타트 팀, 2, 4번이 링크 팀에 속하면, 두 팀의 능력치는 아래와 같다.
스타트 팀: S13 + S31 = 2 + 7 = 9
링크 팀: S24 + S42 = 6 + 4 = 10

축구를 재미있게 하기 위해서 스타트 팀의 능력치와 링크 팀의 능력치의 차이를 최소로 하려고 한다. 
위의 예제와 같은 경우에는 1, 4번이 스타트 팀, 2, 3번 팀이 링크 팀에 속하면
스타트 팀의 능력치는 6, 링크 팀의 능력치는 6이 되어서 차이가 0이 되고 이 값이 최소이다.

입력
첫째 줄에 N(4 ≤ N ≤ 20, N은 짝수)이 주어진다. 둘째 줄부터 N개의 줄에 S가 주어진다. 
각 줄은 N개의 수로 이루어져 있고, i번 줄의 j번째 수는 Sij 이다. 
Sii는 항상 0이고, 나머지 Sij는 1보다 크거나 같고, 100보다 작거나 같은 정수이다.

출력
첫째 줄에 스타트 팀과 링크 팀의 능력치의 차이의 최솟값을 출력한다.

예제 입력 1 
4
0 1 2 3
4 0 5 6
7 1 0 2
3 4 5 0
예제 출력 1 
0
예제 입력 2 
6
0 1 2 3 4 5
1 0 2 3 4 5
1 2 0 3 4 5
1 2 3 0 4 5
1 2 3 4 0 5
1 2 3 4 5 0
예제 출력 2 
2
예제 입력 3 
8
0 5 4 5 4 5 4 5
4 0 5 1 2 3 4 5
9 8 0 1 2 3 1 2
9 9 9 0 9 9 9 9
1 1 1 1 0 1 1 1
8 7 6 5 4 0 3 2
9 1 9 1 9 1 0 9
6 5 4 3 2 1 9 0
예제 출력 3 
1

힌트
예제 2의 경우에 (1, 3, 6), (2, 4, 5)로 팀을 나누면 되고, 예제 3의 경우에는 (1, 2, 4, 5), (3, 6, 7, 8)로 팀을 나누면 된다.

*/

/*

중복되지 않는 조합을 구한 후 조합에 따라 나뉘어진 팀별로 능력치를 계산하고 그 능력치의 최소를 구하는 완전탐색 문제.

여기서 중복되지 않는 조합을 구하려면, 항상 수가 커지는 방향으로 조합을 구해야 하는데,
하나의 조합을 구하면 상대팀은 그 조합을 제외한 나머지 사람이 된다는 것을 이용해야 한다.

즉, N=6인 경우에는 1, 2, 3 / 1, 2, 4 / ... / 4, 5, 6이 구해지게 되므로,
이에 해당하는 상대팀은 4, 5, 6 / ... / 1, 2, 4 / 1, 2, 3이 된다.

그런데 자세히 보면, 팀에 누가 들어왔느냐만 달라질 뿐, 결국 각 팀의 능력치의 차를 계산하는 것이기 때문에
(1, 2, 3) (4, 5, 6)의 능력치 차이와, (4, 5, 6) (1, 2, 3)의 능력치 차이는 같게 된다.
이 점을 이용하여 연산 횟수를 줄이려면, 스타트 팀의 경우는 항상 1을 포함하도록 하여 팀을 꾸리면 된다!!
(또는 구해진 조합에 대해 모든 능력치를 다 구한 후, 반을 기준으로 양쪽의 능력치 차이를 구해도 된다!)

사실 연산 횟수를 꼭 줄여야 할 필요는 없지만, 그래도 불필요한 연산을 줄이는 것이 효율적인 알고리즘이라고 할 수 있으므로
웬만하면 연산 횟수를 최소화 하면서 코드를 짜는 것이 좋다고 생각한다. ㅎㅎ

능력치를 구하는 부분은 그냥 구해진 팀 안에서 2명씩 짝지어서 모든 능력치를 누적시키면 된다!
코드를 보면 더 이해가 쉬우니 이건 코드 참고하기!

*/

#include <iostream>

using namespace std;

const int MAX = 20 + 10;

int N;
int S[MAX][MAX];

int comb[MAX];
int comb2[MAX];
bool isGroup[MAX] = { false, };
int myDiff = 987987987;

int getAbs(int x) {
    if (x > 0) return x;
    else return -x;
}

void getResult() {
    int x = 0;
    for (int i = 1; i <= N; i++) {
        if (!isGroup[i]) comb2[x++] = i; // 스타트 팀의 반대 팀이 링크팀이 된다.
    }

    // 두 명씩 짝 지어서 팀의 능력치를 계산한다.
    int g1 = 0, g2 = 0;
    for (int i = 0; i < N / 2; i++) {
        for (int j = 0; j < N / 2; j++) {
            if (i == j) continue;
            g1 += S[comb[i]][comb[j]];
            g2 += S[comb2[i]][comb2[j]];
        }
    }

    int diff = getAbs(g1 - g2);
    if (myDiff > diff) myDiff = diff;
}

void getComb(int x, int s) {
    if (x >= N / 2) {
        getResult();
    }
    else {
        for (int i = s; i <= N; i++) {
            comb[x] = i;
            isGroup[i] = true;
            getComb(x + 1, i + 1); // 중복이 없도록 s의 위치를 항상 1씩 증가시킨다.
            isGroup[i] = false;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> N;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            cin >> S[i][j];
        }
    }

    comb[0] = 1; // 1을 항상 포함하는 조합을 스타트 팀으로 한다.
    isGroup[1] = true;
    getComb(1, 2);

    cout << myDiff;

    return 0;
}