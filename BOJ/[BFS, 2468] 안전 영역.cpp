/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	128 MB		26707	9861	6642	33.735%


문제
재난방재청에서는 많은 비가 내리는 장마철에 대비해서 다음과 같은 일을 계획하고 있다. 
먼저 어떤 지역의 높이 정보를 파악한다. 
그 다음에 그 지역에 많은 비가 내렸을 때 물에 잠기지 않는 안전한 영역이 최대로 몇 개가 만들어 지는 지를 조사하려고 한다. 
이때, 문제를 간단하게 하기 위하여, 장마철에 내리는 비의 양에 따라 일정한 높이 이하의 모든 지점은 물에 잠긴다고 가정한다.

어떤 지역의 높이 정보는 행과 열의 크기가 각각 N인 2차원 배열 형태로 주어지며 
배열의 각 원소는 해당 지점의 높이를 표시하는 자연수이다. 예를 들어, 다음은 N=5인 지역의 높이 정보이다.

<그림1>

이제 위와 같은 지역에 많은 비가 내려서 높이가 4 이하인 모든 지점이 물에 잠겼다고 하자. 
이 경우에 물에 잠기는 지점을 회색으로 표시하면 다음과 같다. 

<그림2>

물에 잠기지 않는 안전한 영역이라 함은 물에 잠기지 않는 지점들이 위, 아래, 오른쪽 혹은 왼쪽으로 인접해 있으며 
그 크기가 최대인 영역을 말한다. 위의 경우에서 물에 잠기지 않는 안전한 영역은 5개가 된다
(꼭짓점으로만 붙어 있는 두 지점은 인접하지 않는다고 취급한다). 

또한 위와 같은 지역에서 높이가 6이하인 지점을 모두 잠기게 만드는 많은 비가 내리면 
물에 잠기지 않는 안전한 영역은 아래 그림에서와 같이 네 개가 됨을 확인할 수 있다. 

<그림3>

이와 같이 장마철에 내리는 비의 양에 따라서 물에 잠기지 않는 안전한 영역의 개수는 다르게 된다. 
위의 예와 같은 지역에서 내리는 비의 양에 따른 모든 경우를 다 조사해 보면 
물에 잠기지 않는 안전한 영역의 개수 중에서 최대인 경우는 5임을 알 수 있다. 

어떤 지역의 높이 정보가 주어졌을 때, 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 계산하는 프로그램을 작성하시오. 


입력
첫째 줄에는 어떤 지역을 나타내는 2차원 배열의 행과 열의 개수를 나타내는 수 N이 입력된다. 
N은 2 이상 100 이하의 정수이다. 
둘째 줄부터 N개의 각 줄에는 2차원 배열의 첫 번째 행부터 N번째 행까지 순서대로 한 행씩 높이 정보가 입력된다. 
각 줄에는 각 행의 첫 번째 열부터 N번째 열까지 N개의 높이 정보를 나타내는 자연수가 빈 칸을 사이에 두고 입력된다. 
높이는 1이상 100 이하의 정수이다.

출력
첫째 줄에 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 출력한다.
아무 지역도 물에 잠기지 않을 수도 있다.


예제 입력 1 
5
6 8 2 6 2
3 2 3 4 6
6 7 3 3 2
7 2 5 3 6
8 9 5 2 7
예제 출력 1 
5

*/

/*

내리는 비의 양을 달리 해가면서 물에 잠기지 않는 안전 영역의 최대 개수를 찾는 BFS 문제.
비가 내리는 지점인지를 잘 파악하고, 비가 내리지 않는 지점을 기준으로 BFS를 돌리면 안전 영역의 개수를 구할 수 있다.

내릴 수 있는 비의 양은 0(내리지 않는 경우)부터 최대 높이-1까지 가능하다.
(비가 내리지 않으면 안전 영역의 개수가 1개가 무조건 보장이 되므로 안전 영역의 개수가 0이 되는 최대 높이는 의미가 없다.)

내리는 비의 양을 x라고 했을 때, 그 지점이 물에 잠기는 지점인지 아닌지를 체크하는 배열 rain을 사용한다.
(어느 지점의 높이가 x 이하라면 그 지점은 물에 잠기는 지점으로, true 처리를 해준다.)

이후, 안전 영역의 개수를 구하기 위해 물에 잠기지 않았고, 방문되지 않은 지점을 후보로 하여 BFS를 돌린다.
BFS가 한 번 끝날 때마다 안전 영역이 생기는 것이므로, cnt를 1씩 증가시킨다.
그리고 할 수 있는 BFS가 모두 끝나면, 최대 개수를 갱신한다.

*/

#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

const int MAX = 100 + 10;

int N;
int maxH = -1;
int map[MAX][MAX];
int myMax = -1;

bool rain[MAX][MAX];
bool visited[MAX][MAX];

int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };

void BFS(int y, int x) {
    queue<pair<int, int>> q;
    visited[y][x] = true;
    q.push(make_pair(y, x));

    while (!q.empty()) {
        pair<int, int> front = q.front();
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = front.first + dy[i];
            int nx = front.second + dx[i];

            if (ny < 0 || ny > N - 1 || nx < 0 || nx > N - 1) continue;

            // front와 인접한 지점이 물에 잠기지 않았고, 방문되지 않은 경우
            if (!rain[ny][nx] && !visited[ny][nx]) {
                visited[ny][nx] = true;
                q.push(make_pair(ny, nx));
            }
        }
    }
}

void getResult(int x) {
    // rain[i][j] = true : (i, j)지점은 물에 잠기는 지점이다.
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (map[i][j] <= x) rain[i][j] = true;
            else rain[i][j] = false;
        }
    }

    memset(visited, false, sizeof(visited));
    int cnt = 0;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (!rain[i][j] && !visited[i][j]) { // 물에 잠기지 않았고, 방문하지 않은 지점이라면
                BFS(i, j);
                cnt++;
            }
        }
    }

    if (cnt > myMax) myMax = cnt;
}

int main()
{
    scanf("%d", &N);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            scanf("%d", &map[i][j]);

            if (maxH < map[i][j]) maxH = map[i][j];
        }
    }

    // 비의 양을 0부터 maxH - 1까지 조정하여 최대 안전 영역을 구한다.
    for (int i = 0; i < maxH; i++) getResult(i);

    printf("%d", myMax);

    return 0;
}