// 소요시간: 9분
// 실행시간: 0ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초		128 MB		3665	2454	2164	70.881%

문제

매일 매일 일곱 난쟁이는 광산으로 일을 하러 간다. 난쟁이가 일을 하는 동안 백설공주는 그들을 위해 저녁 식사를 준비한다. 
백설공주는 의자 일곱개, 접시 일곱개, 나이프 일곱개를 준비한다.
어느 날 광산에서 아홉 난쟁이가 돌아왔다. (왜 그리고 어떻게 아홉 난쟁이가 돌아왔는지는 아무도 모른다) 
아홉 난쟁이는 각각 자신이 백설공주의 일곱 난쟁이라고 우기고 있다.
백설공주는 이런 일이 생길 것을 대비해서, 난쟁이가 쓰고 다니는 모자에 100보다 작은 양의 정수를 적어 놓았다. 
사실 백설 공주는 공주가 되기 전에 매우 유명한 수학자였다. 
따라서, 일곱 난쟁이의 모자에 쓰여 있는 숫자의 합이 100이 되도록 적어 놓았다.

아홉 난쟁이의 모자에 쓰여 있는 수가 주어졌을 때, 일곱 난쟁이를 찾는 프로그램을 작성하시오. 
(아홉 개의 수 중 합이 100이 되는 일곱 개의 수를 찾으시오)

입력
총 아홉개 줄에 1보다 크거나 같고 99보다 작거나 같은 자연수가 주어진다. 모든 숫자는 서로 다르다. 
또, 항상 답이 유일한 경우만 입력으로 주어진다.

출력
일곱 난쟁이가 쓴 모자에 쓰여 있는 수를 한 줄에 하나씩 출력한다.

예제 입력 1 
7
8
10
13
15
19
20
23
25
예제 출력 1 
7
8
10
13
19
20
23

*/

/*

난쟁이의 키를 모두 입력받은 후에, 중복되지 않도록 길이 7의 조합을 만듦과 동시에 sum을 누적시켜 나간다.
만약 길이가 7이 됐을 때 sum이 100이면 그 난쟁이들의 키를 오름차순으로 출력시키고, 조합을 만드는 것을 중단한다.

6달 전에 풀어봤던 문제지만, 풀었던 걸 모르고 다시 풀어보게 된 문제.. ㅋㅋ
근데 예전에 풀었던 코드를 보니 정말... 효율성 0에 그 당시의 나만 알아볼 수 있게 구현했다(해석하려면 좀 걸릴듯;;)
다시 풀어보길 잘한 것 같다 ㅎㅎ;;;;~~

*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 10;

int height[MAX];
int comb[MAX];
vector<int> h;

void getComb(int x, int sum) {
    if (h.size() == 7) return;

    if (x >= 7) {
        if (sum == 100) {
            for (int i = 0; i < 7; i++) h.push_back(height[comb[i]]);
            sort(h.begin(), h.end());

            for (int i = 0; i < 7; i++) cout << h[i] << "\n";
        }
    }
    else {
        for (int i = 0; i < 9; i++) {
            if (x == 0 || comb[x - 1] < i) {
                comb[x] = i;
                getComb(x + 1, sum + height[i]);
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    for (int i = 0; i < 9; i++) cin >> height[i];

    getComb(0, 0);

    return 0;
}