// 소요시간: 13분
// 실행시간: 0ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
1 초	512 MB		48368		17297	11878		34.577%

문제
차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 
농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 
한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 
이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 
특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 
그 배추들 역시 해충으로부터 보호받을 수 있다.

(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 
서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.

예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.
(0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)
1	1	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	1	1	0	0	0	1	1	1
0	0	0	0	1	0	0	1	1	1

입력
입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 
그 다음 줄부터 각각의 테스트 케이스에 대해 
첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 
그리고 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 
그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.

출력
각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.

*/

/*

◆ 풀이

가로 M, 세로 N의 map의 크기와 K개의 배추 위치가 주어지면,
그 위치에 따라 map에 배추를 표시하고, 인접한 배추끼리 묶어 영역이 총 몇 개인지 세는 BFS 문제.

배추흰지렁이는 상하좌우로 인접한 배추 사이에는 이동할 수 있으므로,
결국 map에 존재하는 배추 영역이 총 몇 개인지 세는 문제와 같다.

이 문제에서는 map이 주어지지 않고 K개의 배추 위치가 주어지므로, 그 위치에 따라 배추를 적절히 표시(1)한 후에
모든 맵을 보면서 방문하지 않은 배추를 시작으로 BFS를 시작한다.

BFS 함수에서는 상하좌우를 보면서 방문하지 않은 인접한 배추를 찾아 큐에 넣는 작업을 반복하기에
BFS가 끝나면 한 영역이 완성되므로, 그와 동시에 answer을 1 증가시켜 주는 것도 필요하다.

최종적으로는 구해진 answer(영역의 개수)이 이 문제의 답이 된다.


◆ 후기

이 문제는 이름과 주어진 상황만 다를 뿐, 완전 전형적인 BFS문제였다.
영역의 개수를 구하는 문제라는 것만 빠르게 캐치하고, 변수 선언과 초기화만 헷갈리지 않게 잘 해주면 어렵지 않게 풀 수 있다!

*/

#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

const int MAX = 50 + 10;

int T;
int M, N, K;

bool map[MAX][MAX];
bool visited[MAX][MAX];

int dy[4] = { -1, 1, 0, 0 };
int dx[4] = { 0, 0, -1, 1 };

int answer = 0;

void BFS(int y, int x) {
    queue<pair<int, int>> q;
    visited[y][x] = true;
    q.push(make_pair(y, x));

    while (!q.empty()) {
        pair<int, int> front = q.front();
        q.pop();

        for (int i = 0; i < 4; i++) {
            int ny = front.first + dy[i];
            int nx = front.second + dx[i];

            if (ny < 0 || ny > N - 1 || nx < 0 || nx > M - 1) continue;

            if (!visited[ny][nx] && map[ny][nx]) { // 방문하지 않은 인접한 배추
                visited[ny][nx] = true;
                q.push(make_pair(ny, nx));
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> T;

    for (int t = 0; t < T; t++) {
        answer = 0;
        memset(visited, 0, sizeof(visited));
        memset(map, 0, sizeof(map));

        cin >> M >> N >> K;

        for (int i = 0; i < K; i++) {
            int X, Y;
            cin >> X >> Y;

            map[Y][X] = 1; // map에 배추 위치를 1로 표시한다.
        }

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (!visited[i][j] && map[i][j]) { // 방문하지 않았으면서 배추인 부분부터 BFS를 시작한다.
                    BFS(i, j);
                    answer++; // 지렁이의 수를 증가시킨다.
                }
            }
        }

        cout << answer << "\n";
    }

    return 0;
}