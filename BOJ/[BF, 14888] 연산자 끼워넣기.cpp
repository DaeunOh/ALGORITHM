// 소요시간: 19분
// 실행시간: 4ms -> 0ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초		512 MB		23555	12760	7669		50.229%

문제
N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 
연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 
주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 
예를 들어, 아래와 같은 식을 만들 수 있다.
1+2+3-4×5÷6
1÷2+3+4-5×6
1+2÷3×4-5+6
1÷2×3-4+5+6

식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 
음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 
이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.
1+2+3-4×5÷6 = 1
1÷2+3+4-5×6 = 12
1+2÷3×4-5+6 = 5
1÷2×3-4+5+6 = 7

N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 
셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 
차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

출력
첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 
연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 
또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

예제 입력 1 
2
5 6
0 0 1 0
예제 출력 1 
30
30

예제 입력 2 
3
3 4 5
1 0 1 0
예제 출력 2 
35
17

예제 입력 3 
6
1 2 3 4 5 6
2 1 1 1
예제 출력 3 
54
-24

힌트
세 번째 예제의 경우에 다음과 같은 식이 최댓값/최솟값이 나온다.
최댓값: 1-2÷3+4+5×6
최솟값: 1+2+3÷4-5×6

*/

/*

고정된 숫자 순서에다가 주어진 연산자의 위치만 바꿈으로써 최댓값과 최솟값을 구하는 완전탐색 문제.

숫자는 고정되어 있고 연산자는 최대 10개이므로, 주어진 연산자의 개수에 맞춰 모든 조합을 구하는 것이 필요하다. (완탐)
우선순위가 고려되어야 했다면 조금 어려웠을 수도 있겠지만, 다행히 우선순위를 고려하지 않아도 되며,
나눗셈 또한 정수 부분만 이용하면 되므로 구현이 어렵지 않다.

조합을 구할 때는 주어진 연산자의 개수를 사용할 때마다 줄이고, 사용했으면 다시 늘리는 방법을 사용했다.
처음에는 조합을 다 구하고 나서 구해진 조합에 맞춰 다시 연산을 수행하는 과정으로 코드를 짰더니 4ms가 나왔다.

하지만, 사실 우선순위가 고려될 필요가 없기 때문에 구해진 조합대로 바로 계산해도 무방한 문제이다.
그래서 조합을 구함과 동시에 계산을 해나가면서 구현했더니 0ms로 답을 구할 수 있었다!

나는 항상 조합 문제를 풀 때마다 미리 조합을 다 구해놓고 그걸 사용하는 방식을 활용했는데,
dfs처럼 바로 구할 수 있다면 인자를 통해 미리 계산해 나가는 것이 더 빠르고 좋은 것 같다. ㅎㅎ

*/

#include <iostream>

using namespace std;

const int MAX = 11 + 10;

int N;
int A[MAX];
int oper[10];

long long myMin = 987987987, myMax = -987987987;

void getComb(int x, long long sum) {
    if (x >= N - 1) {
        if (myMin > sum) myMin = sum;
        if (myMax < sum) myMax = sum;
    }
    else {
        for (int i = 0; i < 4; i++) {
            if (oper[i]) {
                oper[i]--;
                
                if (i == 0) getComb(x + 1, sum + A[x + 1]);
                else if (i == 1) getComb(x + 1, sum - A[x + 1]);
                else if (i == 2) getComb(x + 1, sum * A[x + 1]);
                else getComb(x + 1, sum / A[x + 1]);

                oper[i]++;
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> N;
    for (int i = 0; i < N; i++) cin >> A[i];
    cin >> oper[0] >> oper[1] >> oper[2] >> oper[3];

    getComb(0, A[0]);

    cout << myMax << "\n" << myMin;

    return 0;
}