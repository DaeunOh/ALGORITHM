// 소요시간: 41분
// 실행시간: 0ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	512 MB		19488	9998	6528	50.440%


문제
로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 
각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 
지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.

로봇 청소기는 다음과 같이 작동한다.

1. 현재 위치를 청소한다.
2. 현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
    a. 왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.
    b. 왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.
    c. 네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.
    d. 네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.

로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.


입력
첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)
둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. 
d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.
셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 
빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.
로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.

출력
로봇 청소기가 청소하는 칸의 개수를 출력한다.


예제 입력 1 
3 3
1 1 0
1 1 1
1 0 1
1 1 1
예제 출력 1 
1

예제 입력 2 
11 10
7 4 0
1 1 1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 1 1 1 1 0 1
1 0 0 1 1 0 0 0 0 1
1 0 1 1 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1
예제 출력 2 
57

*/

/*

문제에 주어진 그대로 로봇 청소기의 방향을 바꿔가며 벽이 아닌 영역을 청소하는 문제.
자신의 위치, 방향에 따라 어떤 행동을 취해야 할지가 단계별로 자세히 나와있기 때문에 구현만 잘 해주면 된다.

로봇 청소기는 항상 현재 방향을 기준으로 왼쪽 방향부터 탐색을 하는데,
나는 처음에 자신이 바라보는 방향의 왼쪽 방향을 계속해서 구하는 방법보다
dr, dc에서 인덱스가 증가하는 방향으로 자신의 왼쪽 방향이 오도록 구현하는 방법이 먼저 떠올랐다.

즉, 문제에서는 방향이 0: 상, 1: 우, 2: 하, 3: 좌로 주어져 있지만,
0: 상(우의 왼쪽), 1: 좌(상의 왼쪽), 2: 하(좌의 왼쪽), 3: 우(하의 왼쪽)로 방향을 정의하고,
로봇청소기를 가동하기 전 맨 처음에 d가 1이면 3으로 바꾸고, d가 3이면 1로 바꿔서
이후 단계에 영향을 미치지 않도록 변경했다.
이와 같은 방식을 사용하면 다음 위치를 구하는 부분에서 방향의 인덱스로 (i + leftD) % 4를 사용해야 한다.
(코드에서는 주석처리 한 부분이 바로 그 부분이다.)

이후 초기에 방향을 바꾸지 않고, dr과 dc를 문제에서 주어진대로 구현하려면 어떻게 할지 생각해보게 되었고,
다음 위치를 계산하기 전 자신의 방향을 기준으로 왼쪽 방향을 먼저 구해놓고 leftD에 넣은 후,
이후 이미 청소한 지점 또는 벽인 경우에는 그 방향의 왼쪽 방향으로 leftD를 다시 업데이트 해주는 방식을 사용했다.

dr, dc를 문제에서 주어진 그대로 사용하게 됐기 때문에 % 연산자를 사용할 때보다 조금 더 명확한 코드가 된 것 같다. ㅎㅎ

*/

#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;

const int MAX = 50 + 10;

int N, M;
int R, C, D;
int map[MAX][MAX];
bool visited[MAX][MAX] = { false, };

int dr[4] = { -1, 0, 1, 0 }; // 상, 우, 하, 좌
int dc[4] = { 0, 1, 0, -1 };

//int dr[4] = { -1, 0, 1, 0 }; // 상, 좌, 하, 우
//int dc[4] = { 0, -1, 0, 1 };

int getLeftD(int d) {
    if (d == 0) return 3;
    else if (d == 1) return 0;
    else if (d == 2) return 1;
    else return 2;
}

//int getLeftD(int d) {
//    if (d == 0) return 1;
//    else if (d == 1) return 2;
//    else if (d == 2) return 3;
//    else return 0;
//}

int getBackD(int d) {
    if (d == 0) return 2;
    else if (d == 1) return 3;
    else if (d == 2) return 0;
    else return 1;
}

int main() {
    scanf("%d %d", &N, &M);
    scanf("%d %d %d", &R, &C, &D);

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            scanf("%d", &map[i][j]);
        }
    }

    //if (D == 1) D = 3;
    //else if (D == 3) D = 1;

    int cnt = 0;
    while (1) {
        if (!visited[R][C]) cnt++; // 청소하지 않은 지점이라면 cnt를 1 증가시킨다.
        visited[R][C] = true;

        bool flag = false;
        int leftD = getLeftD(D);
        for (int i = 0; i < 4; i++) {
            int nr = R + dr[leftD];
            int nc = C + dc[leftD];
            
            //int nr = R + dr[(i + leftD) % 4];
            //int nc = C + dc[(i + leftD) % 4];

            if (!visited[nr][nc] && !map[nr][nc]) { // 아직 청소되지 않은 빈 공간이라면 청소한다.
                flag = true;
                D = leftD;
                // D = (i + leftD) % 4;
                R = nr;
                C = nc;
                break;
            }

            leftD = getLeftD(leftD);
        }

        if (!flag) { // 네 방향이 모두 청소 되었거나 벽인 경우
            int backD = getBackD(D);
            int nr = R + dr[backD];
            int nc = C + dc[backD];

            if (map[nr][nc] == 1) break; // 후진할 위치가 벽이라면 작동 종료
            else {
                R = nr;
                C = nc;
            }
        }
    }

    printf("%d\n", cnt);

    return 0;
}