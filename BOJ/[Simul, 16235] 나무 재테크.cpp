// 소요시간: 40분
// 실행시간: 128ms

/*

시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
0.3 초		512 MB		23136	5317	2804		21.477%

문제
부동산 투자로 억대의 돈을 번 상도는 최근 N×N 크기의 땅을 구매했다. 
상도는 손쉬운 땅 관리를 위해 땅을 1×1 크기의 칸으로 나누어 놓았다. 
각각의 칸은 (r, c)로 나타내며, r은 가장 위에서부터 떨어진 칸의 개수, c는 가장 왼쪽으로부터 떨어진 칸의 개수이다. 
r과 c는 1부터 시작한다.

상도는 전자통신공학과 출신답게 땅의 양분을 조사하는 로봇 S2D2를 만들었다. 
S2D2는 1×1 크기의 칸에 들어있는 양분을 조사해 상도에게 전송하고, 모든 칸에 대해서 조사를 한다. 
가장 처음에 양분은 모든 칸에 5만큼 들어있다.

매일 매일 넓은 땅을 보면서 뿌듯한 하루를 보내고 있던 어느 날 이런 생각이 들었다.
"나무 재테크를 하자!"

나무 재테크란 작은 묘목을 구매해 어느정도 키운 후 팔아서 수익을 얻는 재테크이다. 
상도는 나무 재테크로 더 큰 돈을 벌기 위해 M개의 나무를 구매해 땅에 심었다. 
같은 1×1 크기의 칸에 여러 개의 나무가 심어져 있을 수도 있다.

이 나무는 사계절을 보내며, 아래와 같은 과정을 반복한다.

봄에는 나무가 자신의 나이만큼 양분을 먹고, 나이가 1 증가한다. 
각각의 나무는 나무가 있는 1×1 크기의 칸에 있는 양분만 먹을 수 있다. 
하나의 칸에 여러 개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다. 
만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분을 먹지 못하고 즉시 죽는다.

여름에는 봄에 죽은 나무가 양분으로 변하게 된다. 
각각의 죽은 나무마다 나이를 2로 나눈 값이 나무가 있던 칸에 양분으로 추가된다. 소수점 아래는 버린다.

가을에는 나무가 번식한다. 번식하는 나무는 나이가 5의 배수이어야 하며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다. 
어떤 칸 (r, c)와 인접한 칸은 (r-1, c-1), (r-1, c), (r-1, c+1), (r, c-1), (r, c+1), (r+1, c-1), (r+1, c), (r+1, c+1) 이다. 
상도의 땅을 벗어나는 칸에는 나무가 생기지 않는다.

겨울에는 S2D2가 땅을 돌아다니면서 땅에 양분을 추가한다. 각 칸에 추가되는 양분의 양은 A[r][c]이고, 입력으로 주어진다.

K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 N, M, K가 주어진다.
둘째 줄부터 N개의 줄에 A배열의 값이 주어진다. r번째 줄의 c번째 값은 A[r][c]이다.
다음 M개의 줄에는 상도가 심은 나무의 정보를 나타내는 세 정수 x, y, z가 주어진다. 
처음 두 개의 정수는 나무의 위치 (x, y)를 의미하고, 마지막 정수는 그 나무의 나이를 의미한다.

출력
첫째 줄에 K년이 지난 후 살아남은 나무의 수를 출력한다.

제한
1 ≤ N ≤ 10
1 ≤ M ≤ N2
1 ≤ K ≤ 1,000
1 ≤ A[r][c] ≤ 100
1 ≤ 입력으로 주어지는 나무의 나이 ≤ 10
입력으로 주어지는 나무의 위치는 모두 서로 다름

예제 입력 1 
1 1 1
1
1 1 1
예제 출력 1 
1
예제 입력 2 
1 1 4
1
1 1 1
예제 출력 2 
0
예제 입력 3 
5 2 1
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 3 
2
예제 입력 4 
5 2 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 4 
15
예제 입력 5 
5 2 3
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 5 
13
예제 입력 6 
5 2 4
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 6 
13
예제 입력 7 
5 2 5
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 7 
13
예제 입력 8 
5 2 6
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 3 2 3 2
2 1 3
3 2 3
예제 출력 8 
85

*/

/*

각 계절 별로 주어진 프로세스를 그대로 구현하면 되는 시뮬레이션 문제!

시뮬레이션 문제는 언제나 그랬듯이, 설계가 가장 중요하다!
급하게 풀려고 하기 보다 정확하게 설계를 하고, 그에 맞춰서 코드를 짜면 오히려 바로 코딩에 시작하는 것보다
명확하고, 더 빠르게 풀 수 있는 문제라고 생각한다 ㅎㅎㅎ

그래서 이번에도 열심히 설계 노트에 어떻게 짤지 설계를 해나갔고,
노트에 적은 그대로 구현했더니 막힘없이 쉽게 풀 수 있었다!


전체적인 실행 과정은 다음과 같다.

1) 봄
  1-1) 모든 땅을 돌면서 해당 지점에 나무가 존재하는지 확인한다.
  1-2) 나무가 존재하면 오름차순으로 정렬한다.
  1-3) 어린 나무부터 양분을 먹인다.
  1-4) 만약 나무가 존재하지만, 그 나이만큼의 양분이 존재하지 않으면 그 나무는 죽는 나무이며, 그 뒤에 있는 나무도 다 죽는다.
  1-5) 죽기 전에 자신의 나이/2만큼을 NE라는 배열에 저장해둔다.

2) 여름
  2-1) 모든 땅을 돌면서 NE를 확인한다.
  2-2) NE가 양수인 지점이 있다면 그 수만큼 E에 더해주고, NE는 0으로 리셋해준다.

3) 가을
  3-1) 모든 땅을 돌면서 나무의 나이가 5의 배수가 되는지 확인한다.
  3-2) 5의 배수인 나무가 있는 경우 주변 8칸에 나이가 1인 나무를 번식시킨다. (땅을 넘어가는 지점은 제외)

4) 겨울
  4-1) E에다가 A[r][c]만큼 양분을 추가한다.


친구들이 어렵다고 해서 많이 걱정했는데, 생각보다 그렇지 않아서 괜찮았던 문제!
역시 사람마다 같은 문제여도 잘 풀리는 문제가 있고, 그렇지 않은 문제가 있나보다..
물론 내가 다른 친구들보다 잘 못 푸는 문제가 더 많은 것 같다 ㅋㅋㅋㅋ ㅠㅠ

비록 지금은 남들보다 떨어질지라도 남들보다 성장할 기회가 더 많은 것이라고 생각하면 나쁜 것만은 아니다 ㅎㅎㅎ
긍정적으로 생각하면서 앞으로는 그게 반전이 될 수 있도록 노력을 더 많이 하자!! ^_^

*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 10 + 10;

int N, M, K;
int A[MAX][MAX];

int E[MAX][MAX]; // 양분
int NE[MAX][MAX] = { 0, }; // 새로운 양분

vector<int> map[MAX][MAX];

int dr[8] = { -1, -1, -1, 0, 0, 1, 1, 1 };
int dc[8] = { -1, 0, 1, -1, 1, -1, 0, 1 };

void season1() { // 봄
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (!map[i][j].size()) continue; // 나무가 없는 지점

            sort(map[i][j].begin(), map[i][j].end()); // 오름차 순으로 정렬한다.

            // 어린 나무부터 양분을 섭취하고, 양분 없으면 그 뒤의 나무는 다 죽는다.
            for (int k = 0; k < map[i][j].size(); k++) {
                if (map[i][j][k] <= E[i][j]) { // 양분을 섭취할 수 있는 경우
                    E[i][j] -= map[i][j][k];
                    map[i][j][k]++;
                }
                else { // 맨 끝에있는 나무부터 해당 지점까지 나무를 없앤다.
                    while (map[i][j].size() != k) {
                        NE[i][j] += map[i][j][map[i][j].size() - 1] / 2; // 죽고 나서 생긴 양분
                        map[i][j].pop_back();
                        M--;
                    }
                    break;
                }
            }
        }
    }
}

void season2() { // 여름
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (NE[i][j]) { // 나무가 죽고 나서 생긴 양분을 기존 양분에 더해준다.
                E[i][j] += NE[i][j];
                NE[i][j] = 0;
            }
        }
    }
}

void season3() { // 가을
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (!map[i][j].size()) continue;

            // 나무의 나이를 보면서 나이가 5의 배수인 경우에만 번식한다.
            for (int k = 0; k < map[i][j].size(); k++) {
                if (map[i][j][k] % 5 == 0) {
                    for (int l = 0; l < 8; l++) { // 8개의 지점에 나무 번식
                        int nr = i + dr[l];
                        int nc = j + dc[l];

                        if (nr < 1 || nr > N || nc < 1 || nc > N) continue;

                        map[nr][nc].push_back(1);
                        M++;
                    }
                }
            }
        }
    }
}

void season4() { // 겨울
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            E[i][j] += A[i][j]; // 양분을 추가해준다.
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> N >> M >> K;
    
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            cin >> A[i][j];
            E[i][j] = 5; // 초기 양분
        }
    }

    for (int i = 1; i <= M; i++) {
        int x, y, z;
        cin >> x >> y >> z;
        map[x][y].push_back(z);
    }

    while (K--) {
        season1();
        season2();
        season3();
        season4();
    }

    cout << M;

    return 0;
}